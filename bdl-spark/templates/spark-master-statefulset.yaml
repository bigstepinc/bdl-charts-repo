apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "bdl-spark.master.fullname" . }}
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: {{ template "bdl-spark.chart" . }}
    component: "{{ .Release.Name }}-{{ .Values.Master.Component }}"
spec:
  serviceName: "{{ template "bdl-spark.master.fullname" . }}"
  replicas: {{ .Values.Master.Replicas }}
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      component: "{{ .Release.Name }}-{{ .Values.Master.Component }}"
  template:
    metadata:
      name: "{{ template "bdl-spark.master.fullname" }}"
      labels:
        heritage: {{ .Release.Service | quote }}
        release: {{ .Release.Name | quote }}
        chart: {{ template "bdl-spark.chart" . }}
        component: "{{ .Release.Name }}-{{ .Values.Master.Component }}"
    spec:
      containers:
      - name: "{{ template "bdl-spark.master.fullname" . }}-ui-proxy"
        image: "elsonrodriguez/spark-ui-proxy"
        imageTag: "1.0"
        ports:
        - name: master-web-ui-proxy
          containerPort: 80
          protocol: TCP
        resources:
          requests:
            cpu: 100m
        args:
          - "{{ template "bdl-spark.master.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:8080"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 120
          timeoutSeconds: 5
      - name: "{{ template "bdl-spark.master.fullname" . }}"
        image: "{{ .Values.Master.Image }}:{{ .Values.Master.ImageTag }}"
        imagePullPolicy: "{{ .Values.Master.ImagePullPolicy }}"
        terminationMessagePolicy: "File"
        terminationMessagePath: "/dev/termination-log"
        ports:
        - name: spark-app-ui
          containerPort: 4040
          protocol: TCP
        - name: master-web-ui
          containerPort: 8080
          protocol: TCP
        - name: spark-master
          containerPort: 7077
          protocol: TCP
        resources:
{{ toYaml .Values.Master.Resources | indent 10 }}
        env:
        - name: LOCAL_DIR
          value: {{ .Values.Master.DataDir }}
        - name: CORES
          value: "{{ .Values.Env.CORES }}"
        - name: DRIVER_CORES
          value: "{{ .Values.Env.DRIVER_CORES }}"
        - name: DRIVER_MEM
          value: "{{ .Values.Env.DRIVER_MEM }}"
        - name: AUTH_METHOD
          value: "{{ .Values.ObjStorage.Auth.Method }}"
        {{- if (eq .Values.ObjStorage.Auth.Method "mock-basic") }}
        - name: OBJ_STORAGE_USERNAME
          value: "{{ .Values.ObjStorage.Auth.Username }}"
        - name: OBJ_STORAGE_PASSWORD
          value: "{{ .Values.ObjStorage.Auth.Password }}"
        {{- else if (eq .Values.ObjStorage.Auth.Method "mock-apikey") }}
        - name: AUTH_APIKEY
          value: "{{ .Values.ObjStorage.Auth.ApiKey }}"
        {{- else if (eq .Values.ObjStorage.Auth.Method "apikey") }}
        - name: AUTH_APIKEY
          value: "{{ .Values.ObjStorage.Auth.ApiKey }}"
        - name: API_ENDPOINT
          value: "{{ .Values.BDL.ApiEndpoint }}"
        {{- end }}
        - name: EX_CORES
          value: "{{ .Values.Env.EX_CORES }}"
        - name: EX_MEM
          value: "{{ .Values.Env.EX_MEM }}"
        - name: JAVA_DRIVER_OPTS
          value: "{{ .Values.Env.JAVA_DRIVER_OPTS }}"
        - name: MEM
          value: "{{ .Values.Env.MEM }}"
        - name: MODE
          value: "master"
        - name: SPARK_MASTER_HOSTNAME
          value: "{{ template "bdl-spark.master.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local"
        - name: SPARK_MASTER_PORT
          value: "7077"
        - name: SPARK_MASTER_WEBUI_PORT
          value: "8080"
        - name: SPARK_UI_PORT
          value: "4040"
        - name: SPARK_WORKER_WEBUI_PORT
          value: "8081"
        {{- if .Values.DataBase.Enabled}}
        - name: DB_TYPE
          value: "{{ .Values.DataBase.Type }}"
        {{- if (eq .Values.DataBase.Type "postgresql") }}
        - name: POSTGRES_HOSTNAME
          value: "{{ .Values.DataBase.Hostname }}"
        - name: POSTGRES_PORT
          value: "{{ .Values.DataBase.Port }}"
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.DataBase.CredentialsSecret }}
              key: db_name
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.DataBase.CredentialsSecret }}
              key: db_user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.DataBase.CredentialsSecret }}
              key: db_password
        {{- end }}
        {{- end }}
        {{- if .Values.Audit.Enabled }}
        - name: AUDIT_ENABLED
          value: "true"
        - name: AUDIT_ELASTICSEARCH_URL
          value: "{{ .Values.Audit.ESURL }}"
        - name: AUDIT_ELASTICSEARCH_AUTH_TOKEN
          value: "{{ .Values.Audit.ESAuthToken }}"
        - name: AUDIT_MOCK_USERID
          value: "{{ .Values.Audit.MockUserId }}"
        {{- else }}
        - name: AUDIT_ENABLED
          value: "false"
        {{- end }}
        - name: SPARK_WAREHOUSE_DIR
          value: "{{ .Values.ObjStorage.WarehouseDir }}"
        - name: BDL_DEFAULT_PATH
          value: "{{ .Values.ObjStorage.BdlDefaultPath }}"
        volumeMounts:
        - name: data
          mountPath: {{ .Values.Master.DataDir }}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  volumeClaimTemplates:
  - metadata:
      labels:
        heritage: {{ .Release.Service | quote }}
        release: {{ .Release.Name | quote }}
        chart: {{ template "bdl-spark.chart" . }}
        component: "{{ .Release.Name }}-{{ .Values.Master.Component }}"
      name: "data"
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "{{ .Values.Master.Storage }}"
      {{- if (not .Values.Master.StorageClassUseDefault) }}
      {{- if (eq "-" .Values.Master.StorageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ .Values.Master.StorageClass }}"
      {{- end }}
      {{- end }}
  podManagementPolicy: OrderedReady
  revisionHistoryLimit: 10