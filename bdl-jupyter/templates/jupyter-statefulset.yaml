apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "bdl-jupyter.fullname" . }}
  labels:
    heritage: {{ .Release.Service | quote }}
{{- if .Values.Labels }}
{{ toYaml .Values.Labels | indent 4 }}
{{- else }}
    release: {{ .Release.Name | quote }}
    chart: {{ template "bdl-jupyter.chart" . }}
    component: "{{ .Release.Name }}-{{ .Values.Component }}"
{{- end }}
spec:
  serviceName: "{{ template "bdl-jupyter.fullname" . }}"
  replicas: {{ .Values.Replicas }}
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      heritage: {{ .Release.Service | quote }}
{{- if .Values.Labels }}
{{ toYaml .Values.Labels | indent 6 }}
{{- else }}
      release: {{ .Release.Name | quote }}
      chart: {{ template "bdl-jupyter.chart" . }}
      component: "{{ .Release.Name }}-{{ .Values.Component }}"
{{- end }}
  template:
    metadata:
      labels:
        heritage: {{ .Release.Service | quote }}
{{- if .Values.Labels }}
{{ toYaml .Values.Labels | indent 8 }}
{{- else }}
        release: {{ .Release.Name | quote }}
        chart: {{ template "bdl-jupyter.chart" . }}
        component: "{{ .Release.Name }}-{{ .Values.Component }}"
{{- end }}
    spec:
      containers:
      - name: "{{ template "bdl-jupyter.fullname" . }}"
        image: "{{ .Values.Image }}:{{ .Values.ImageTag }}"
        imagePullPolicy: "{{ .Values.ImagePullPolicy }}"
        terminationMessagePolicy: "File"
        terminationMessagePath: "/dev/termination-log"
        ports:
        - name: notebook
          containerPort: 8888
          protocol: TCP
        resources:
{{ toYaml .Values.Resources | indent 10 }}
        env:
        - name: JUPYTER_TOKEN_PATH
          value: "{{ .Values.Notebook.TokenFolder }}/{{ .Values.Notebook.TokenFile }}"
        - name: DATALAKE_ID
          value: "{{ .Values.BDL.DatalakeId }}"
        - name: DATAPOOL_NAME
          value: "{{ .Values.BDL.DatapoolName }}"
        - name: STARTER_DATAPOOL
          value: "{{ .Values.BDL.StarterDatapool }}"
        - name: PROJECT
          value: "{{ .Values.BDL.ProjectName }}"
        - name: AUTH_METHOD
          value: "{{ .Values.ObjStorage.Auth.Method }}"
        {{- if (eq .Values.ObjStorage.Auth.Method "apikey") }}
        - name: AUTH_APIKEY
          value: "{{ .Values.ObjStorage.Auth.ApiKey }}"
        - name: API_ENDPOINT
          value: "{{ .Values.BDL.ApiEndpoint }}"
        {{- end }}
        - name: SPARK_WAREHOUSE_DIR
          value: "{{ .Values.ObjStorage.WarehouseDir }}"
        - name: BDL_DEFAULT_PATH
          value: "{{ .Values.ObjStorage.BdlDefaultPath }}"
        - name: MODE
          value: "jupyter"
        - name: NOTEBOOK_DIR
          value: {{ .Values.DataDir }}
        {{- if .Values.DataBase.Enabled}}
        - name: DB_TYPE
          value: "{{ .Values.DataBase.Type }}"
        {{- if (eq .Values.DataBase.Type "postgresql") }}
        - name: POSTGRES_HOSTNAME
          value: "{{ .Values.DataBase.Hostname }}"
        - name: POSTGRES_PORT
          value: "{{ .Values.DataBase.Port }}"
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.DataBase.CredentialsSecret }}
              key: db_name
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.DataBase.CredentialsSecret }}
              key: db_user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.DataBase.CredentialsSecret }}
              key: db_password
        {{- end }}
        {{- end }}
        {{- if .Values.Notebook.Secret.Create }}
        - name: NOTEBOOK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "bdl-jupyter.fullname" . }}-credentials
              key: notebook_password
        {{- else }}
        - name: NOTEBOOK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.Notebook.Secret.ExternalName }}
              key: notebook_password
        {{- end }}
        volumeMounts:
        - name: datadir
          mountPath: {{ .Values.DataDir }}
        - name: token
          mountPath: "{{ .Values.Notebook.TokenFolder }}"
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedularName: default-scheduler
      volumes:
      - name: datadir
        persistentVolumeClaim:
          claimName: "data-{{ template "bdl-jupyter.fullname" . }}"
      - name: token
        projected:
          sources:
          - secret:
              name: "{{ template "bdl-jupyter.fullname" . }}-token"
              items:
              - key: token
                path: "{{ .Values.Notebook.TokenFile }}"
  podManagementPolicy: OrderedReady
  revisionHistoryLimit: 10