apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "bdl-kafka.core.fullname" . }}
  labels:
{{- if .Values.Labels }}
{{ toYaml .Values.Labels | indent 4 }}
{{- else }}
    release: {{ .Release.Name | quote }}
    chart: {{ template "bdl-kafka.chart" . }}
    component: "{{ .Release.Name }}-{{ .Values.Core.Component }}"
{{- end }}
  heritage: {{ .Release.Service | quote }}
spec:
  serviceName: "{{ template "bdl-kafka.core.fullname" . }}"
  replicas: {{ .Values.Core.Replicas }}
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
{{- if .Values.Labels }}
{{ toYaml .Values.Labels | indent 6 }}
{{- else }}
      component: "{{ .Release.Name }}-{{ .Values.Core.Component }}"
{{- end }}
  template:
    metadata:
      name: "{{ template "bdl-kafka.core.fullname" }}-broker"
      labels:
{{- if .Values.Labels }}
{{ toYaml .Values.Labels | indent 8 }}
{{- else }}
        release: {{ .Release.Name | quote }}
        chart: {{ template "bdl-kafka.chart" . }}
        component: "{{ .Release.Name }}-{{ .Values.Core.Component }}"
{{- end }}
      heritage: {{ .Release.Service | quote }}
    spec:
      containers:
      - name: "{{ template "bdl-kafka.core.fullname" . }}"
        image: "{{ .Values.Core.Image }}:{{ .Values.Core.ImageTag }}"
        imagePullPolicy: "{{ .Values.Core.ImagePullPolicy }}"
        command:
        - "sh"
        - "-c"
        - "./opt/kafkaGenConfig.sh && kafka-server-start $KAFKA_CONF/kafka.properties"
        terminationMessagePolicy: "File"
        terminationMessagePath: "/dev/termination-log"
        ports:
        - name: broker
          containerPort: 9092
          protocol: TCP
        resources:
{{ toYaml .Values.Core.Resources | indent 10 }}
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: KAFKA_SERVICE_HOST
          value: "{{ template "bdl-kafka.core.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local"
        - name: KAFKA_HEAP_OPTS
          value: "{{ .Values.Core.Env.KAFKA_HEAP_OPTS }}"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "{{ template "bdl-kafka.zookeeper.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:2181"
        - name: KAFKA_ZOOKEEPER_SERVICE_HOST
          value: "{{ template "bdl-kafka.zookeeper.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local"
        - name: KAFKA_ZOOKEEPER_SERVICE_PORT
          value: "2181"
        - name: KAFKA_LOG_DIRS
          value: "{{ .Values.Core.LogsDir }}"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "{{ .Values.Core.Env.KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR }}"
        volumeMounts:
        - name: "logs"
          mountPath: {{ .Values.Core.LogsDir }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
  volumeClaimTemplates:
  - metadata:
      labels:
        heritage: {{ .Release.Service | quote }}
        release: {{ .Release.Name | quote }}
        chart: {{ template "bdl-kafka.chart" . }}
        component: "{{ .Release.Name }}-{{ .Values.Core.Component }}"
      name: "logs"
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "{{ .Values.Core.Storage }}"
      {{- if (not .Values.Core.StorageClassUseDefault) }}
      {{- if (eq "-" .Values.Core.StorageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ .Values.Core.StorageClass }}"
      {{- end }}
      {{- end }}








